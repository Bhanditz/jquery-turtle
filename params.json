{"name":"jQuery-turtle","tagline":"Turtle Graphics for JQuery","body":"jQuery-turtle\r\n=============\r\n\r\nversion 2.0.5\r\n\r\njQuery-turtle is a jQuery plugin for turtle graphics.\r\n\r\nWith jQuery-turtle, every DOM element is a turtle that can be\r\nmoved using LOGO-inspired turtle methods like fd, bk, rt, and lt.\r\n<pre>\r\n  $('#turtle').pen('red').rt(90).fd(100).lt(90).bk(50).fadeOut();\r\n</pre>\r\nThe plugin also provides functions to help in a rotated,\r\nscaled, and transformed world where nested elements may be\r\ntransformed.  There are functions for collision testing, absolute\r\npositioning, and absolute direction reading and setting.\r\n\r\n[Try an interactive demo (CoffeeScript syntax) here.](\r\nhttp://davidbau.github.io/jquery-turtle/demo.html)\r\n\r\nUnder the covers, CSS3 2D transforms and jQuery animations are\r\nused to execute and store turtle movement, so jQuery-turtle\r\ninteracts well with other jQuery animations or direct uses of\r\n2D CSS3 transforms.  The plugin sets up jQuery CSS hooks for\r\nsynthetic CSS properties such as turtleForward that can be\r\nanimated or used to directly manipulate turtle geometry at a basic\r\nmathematical level.\r\n\r\nA high-level educational environment is enabled by $.turtle().\r\nThat call creates a set of global objects and functions\r\ncatering to beginners.  These include a default turtle\r\nand global functions to control it; an onpage debugger panel;\r\njQuery instances for every object with an #id; simplified\r\nglobals to access recent mouse and keyboard events, and\r\nsimplified functions for randomness, timers, animation control,\r\nand creation of new turtles.  The jQuery teaching environment\r\nhas been developed to support a curriculum for young students.\r\n\r\nJQuery Methods for Turtle Movement\r\n----------------------------------\r\n\r\nTurtle-oriented methods taking advantage of the css support:\r\n<pre>\r\n  $(x).fd(100)      // Forward relative motion in local coordinates.\r\n  $(x).bk(50)       // Back.\r\n  $(x).rt(90)       // Right turn.\r\n  $(x).lt(45)       // Left turn.\r\n\r\n  // Methods below happen in an instant, but queue after animation.\r\n  $(x).pen('red')   // Sets a pen style, or 'none' for no drawing.\r\n  $(x).dot(12)      // Draws a circular dot of diameter 12.\r\n  $(x).erase()      // Erases under the turtles collision hull.\r\n  $(x).img('blue')  // Switch the image to a blue pointer.  May use any url.\r\n  $(x).moveto({pageX: 40, pageY: 140})  // Absolute motion in page coordinates.\r\n  $(x).turnto(heading || position)      // Absolute heading adjustment.\r\n  $(x).scale(1.5)   // Scales turtle size and motion by 150%.\r\n  $(x).twist(180)   // Changes which direction is considered \"forward\".\r\n  $(x).mirror(true) // Flips the turtle across its main axis.\r\n  $(x).reload()     // Reloads the turtle's image (restarting animated gifs)\r\n  $(x).direct(fn)   // Like each, but this is set to $(elt) instead of elt.\r\n\r\n  // Methods below this line do not queue for animation.\r\n  $(x).origin()     // Page coordinate position of transform-origin.\r\n  $(x).bearing()    // Absolute direction taking into account all transforms.\r\n  $(x).shown()      // Shorthand for is(\":visible\")\r\n  $(x).hidden()     // Shorthand for !is(\":visible\")\r\n  $(x).touches(y)   // Collision tests elements (uses turtleHull if present).\r\n  $(x).encloses(y)  // Containment collision test.\r\n  $(x).within(d, t) // Filters to items with origins within d of t.origin().\r\n  $(x).notwithin()  // The negation of within.\r\n</pre>\r\n\r\nWhen $.fx.speeds.turtle is nonzero (the default is zero unless\r\n$.turtle() is called), the first four movement functions animate\r\nat that speed, and the remaining mutators also participate in the\r\nanimation queue.  Note that property-reading functions such as\r\ntouches() are synchronous and will not queue, and setting\r\n$.fx.speed.turtle to 0 will make movement functions synchronous.\r\n\r\nThe absolute motion methods moveto and turnto accept any argument\r\nwith pageX and pageY, including, usefully, mouse events.  They\r\noperate in absolute page coordinates even when the turtle is nested\r\nwithin further transformed elements.\r\n\r\nThe hit-testing functions touches() and encloses() will test using\r\nthe convex hull for the two objects in question. This defaults to\r\nthe bounding box of the elements (as transformed) but can be overridden\r\nby the turtleHull CSS property, if present.\r\n\r\nJQuery CSS Hooks for Turtle Geometry\r\n------------------------------------\r\n\r\nTurtle-oriented 2d transform cssHooks, with animation support on all\r\nmotion:\r\n\r\n<pre>\r\n  $(x).css('turtlePosition', '30 40');   // position in local coordinates.\r\n  $(x).css('turtlePositionX', '30');     // x component.\r\n  $(x).css('turtlePositionY', '40');     // y component.\r\n  $(x).css('turtleRotation', '90');      // rotation in degrees.\r\n  $(x).css('turtleScale', '2');          // double the size of any element.\r\n  $(x).css('turtleScaleX', '2');         // x stretch before rotate after twist.\r\n  $(x).css('turtleScaleY', '2');         // y stretch before rotate after twist.\r\n  $(x).css('turtleTwist', '45');         // turn before stretching.\r\n  $(x).css('turtleForward', '50');       // position in direction of rotation.\r\n  $(x).css('turtlePen', 'red');          // or 'red lineWidth 2px' etc.\r\n  $(x).css('turtleHull', '5 0 0 5 0 -5');// fine-tune shape for collisions.\r\n</pre>\r\n\r\nArbitrary 2d transforms are supported, including transforms of elements\r\nnested within other elements that have css transforms. Transforms are\r\nautomatically decomposed to turtle components when necessary.\r\n\r\nA canvas is supported for drawing, but only created when the pen is\r\nused; pen styles include canvas style properties such as lineWidth\r\nand lineCap.\r\n\r\nA convex hull polygon can be set to be used by the collision detection\r\nand hit-testing functions (encloses, touches).  The turtleHull is a list\r\nof (unrotated) x-y coordinates relative to the object's transformOrigin.\r\nIf set to 'auto' (the default) the hull is just the bounding box for the\r\nelement.\r\n\r\nTurtle Teaching Environment\r\n---------------------------\r\n\r\nAn optional teaching environment setup is created by eval($.turtle()).\r\nIt provides easy packaging for the above functionality.\r\n\r\nAfter eval($.turtle()):\r\n  * An &lt;img id=\"turtle\"&gt; is created if #turtle doesn't already exist.\r\n  * An eval debugging panel (see.js) is shown at the bottom of the screen.\r\n  * Turtle methods on the default turtle are packaged as globals, e.g., fd(10).\r\n  * Every #id element is turned into a global variable: window.id = $('#id').\r\n  * Default turtle animation is set to 1 move per sec so steps can be seen.\r\n  * And the following are defined:\r\n\r\n<pre>\r\n  lastclick             // Event object of the last click event in the doc.\r\n  lastmousemove         // The last mousemove event.\r\n  lastmouseup           // The last mouseup event.\r\n  lastmousedown         // The last mousedown event.\r\n  keydown               // The last keydown event.\r\n  keyup                 // The last keyup event.\r\n  keypress              // The last keypress event.\r\n  speed(movesPerSec)    // Sets $.fx.speeds.turtle to 1000 / movesPerSec.\r\n  tick([perSec,] fn)    // Sets fn as the tick callback (null to clear).\r\n  random(n)             // Returns a random number [0...n-1].\r\n  random(list)          // Returns a random element of the list.\r\n  random('normal')      // Returns a gaussian random (mean 0 stdev 1).\r\n  random('uniform')     // Returns a uniform random [0...1).\r\n  random('position')    // Returns a random {pageX:x, pageY:y} in the document.\r\n  remove()              // Removes default turtle and its globals (fd, etc).\r\n  hatch([n,], [img])    // Creates and returns n turtles with the given img.\r\n  see(a, b, c...)       // Logs tree-expandable data into debugging panel.\r\n  output(html || text)  // Appends html into the document body.\r\n  input([label,] fn)    // Makes a one-time input field, calls fn after entry.\r\n  button([label,] fn)   // Makes a clickable button, calls fn when clicked.\r\n</pre>\r\n\r\nFor example, after eval($.turtle()), the following is a valid program\r\nin CoffeeScript syntax:\r\n\r\n<pre>\r\nspeed Infinity\r\noutput \"Try to catch blue.\"\r\nr = hatch 'red'\r\nb = hatch 'blue'\r\nsafe = 20\r\ntick 10, ->\r\n  turnto lastmousemove\r\n  fd 6\r\n  if safe > 0\r\n    safe = safe - 1\r\n  else\r\n    r.turnto turtle\r\n    r.fd 4\r\n    b.turnto r\r\n    b.fd 3\r\n    if b.touches(turtle)\r\n      output \"You win!\"\r\n      tick null\r\n    else if r.touches(turtle)\r\n      output \"Too slow!\"\r\n      tick null\r\n</pre>\r\n\r\nThe turtle teaching environment is designed to work well with either\r\nJavascript or CoffeeScript.\r\n\r\nLicense (MIT)\r\n-------------\r\n\r\nCopyright (c) 2013 David Bau\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}