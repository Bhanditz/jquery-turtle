{"name":"jQuery-turtle","tagline":"Turtle Graphics for JQuery","body":"jQuery-turtle\r\n=============\r\n\r\nversion 2.0.7\r\n\r\njQuery-turtle is a jQuery plugin for turtle graphics.\r\n\r\nWith jQuery-turtle, every DOM element is a turtle that can be\r\nmoved using turtle graphics methods like fd (forward), bk (back),\r\nrt (right turn), and lt (left turn).  The pen function allows\r\na turtle to draw on a full-document canvas as it moves.\r\n\r\n<pre>\r\n$('#turtle').pen('red').rt(90).fd(100).lt(90).bk(50).fadeOut();\r\n</pre>\r\n\r\njQuery-turtle provides:\r\n  * Relative and absolute motion and drawing.\r\n  * Functions to ease basic input, output, and game-making for beginners.\r\n  * Operations on sets of turtles, and turtle motion of arbitrary elements.\r\n  * Accurate collision-testing of turtles with arbitrary convex hulls.\r\n  * Simplified access to CSS3 transforms, jQuery animations, Canvas, and Web Audio.\r\n  * An interactive turtle console in either Javascript or CoffeeScript.\r\n\r\nThe plugin can also create a learning environment with a default\r\nturtle that is friendly for beginners.  The following is a complete\r\nCoffeeScript program that uses the default turtle to draw a grid of\r\nsixteen colored polygons.\r\n\r\n<pre>\r\neval $.turtle()  # Create the default turtle.\r\n\r\nspeed 100\r\nfor color in [red, gold, green, blue]\r\n  for sides in [3..6]\r\n    pen color\r\n    for x in [1..sides]\r\n      fd 100 / sides\r\n      lt 360 / sides\r\n    pen null\r\n    fd 40\r\n  slide 40, -160\r\n</pre>\r\n\r\n[Try an interactive demo (CoffeeScript syntax) here.](\r\nhttp://davidbau.github.io/jquery-turtle/demo.html)\r\n\r\n\r\nJQuery Methods for Turtle Movement\r\n----------------------------------\r\n\r\nThe turtle API is briefly summarized below.  All the following\r\nturtle-oriented methods operate on any jQuery object (including\r\nthe default turtle, if used):\r\n\r\n<pre>\r\n$(q).fd(100)      // Forward relative motion in local coordinates.\r\n$(q).bk(50)       // Back.\r\n$(q).rt(90)       // Right turn.  Optional turning radius second arg.\r\n$(q).lt(45)       // Left turn.  Optional turning radius second arg.\r\n$(q).slide(x, y)  // Slide right by x while sliding forward by y.\r\n$(q).moveto({pageX:x,pageY:y} | [x,y])  // Absolute motion on page.\r\n$(q).jumpto({pageX:x,pageY:y} | [x,y])  // Like moveto, without drawing.\r\n$(q).turnto(bearing || position)        // Absolute direction adjustment.\r\n$(q).play(\"ccgg\") // Plays notes using ABC notation and waits until done.\r\n\r\n// Methods below happen in an instant, but line up in the animation queue.\r\n$(q).home()       // Jumps to the center of the document, with bearing 0.\r\n$(q).pen('red')   // Sets a pen style, or 'none' for no drawing.\r\n$(q).pu()         // Pen up - temporarily disables the pen (also pen(false)).\r\n$(q).pd()         // Pen down - starts a new pen path.\r\n$(q).pe()         // Uses the pen 'erase' style.\r\n$(q).fill('gold') // Fills a shape previously outlined using pen('path').\r\n$(q).dot(12)      // Draws a circular dot of diameter 12.  Color second arg.\r\n$(q).label('A')   // Prints an HTML label at the turtle location.\r\n$(q).speed(10)    // Sets turtle animation speed to 10 moves per sec.\r\n$(q).ht()         // Hides the turtle.\r\n$(q).st()         // Shows the turtle.\r\n$(q).wear('blue') // Switches to a blue shell.  Use any image or color.\r\n$(q).scale(1.5)   // Scales turtle size and motion by 150%.\r\n$(q).twist(180)   // Changes which direction is considered \"forward\".\r\n$(q).mirror(true) // Flips the turtle across its main axis.\r\n$(q).reload()     // Reloads the turtle's image (restarting animated gifs)\r\n$(q).direct(fn)   // Like each, but this is set to $(elt) instead of elt,\r\n                  // and the callback fn can insert into the animation queue.\r\n\r\n// Methods below this line do not queue for animation.\r\n$(q).getxy()      // Local (center-y-up [x, y]) coordinates of the turtle.\r\n$(q).pagexy()     // Page (topleft-y-down {pageX:x, pageY:y}) coordinates.\r\n$(q).bearing([p]) // The turtles absolute direction (or direction towards p).\r\n$(q).distance(p)  // Distance to p in page coordinates.\r\n$(q).shown()      // Shorthand for is(\":visible\")\r\n$(q).hidden()     // Shorthand for !is(\":visible\")\r\n$(q).touches(y)   // Collision tests elements (uses turtleHull if present).\r\n$(q).enclosedby(y)// Containment collision test.\r\n$(q).within(d, t) // Filters to items with centers within d of t.pagexy().\r\n$(q).notwithin()  // The negation of within.\r\n$(q).cell(y, x)   // Selects the yth row and xth column cell in a table.\r\n$(q).hatch([n,] [img]) // Creates and returns n turtles with the given img.\r\n</pre>\r\n\r\n\r\nSpeed and Turtle Animation\r\n--------------------------\r\n\r\nWhen the speed of a turtle is nonzero, the first eight movement\r\nfunctions animate at that speed (in moves per second), and the\r\nremaining mutators also participate in the animation queue.  The\r\ndefault turtle speed is a leisurely one move per second (as\r\nappropriate for the creature), but you may soon discover the\r\ndesire to set speed higher.\r\n\r\nSetting the turtle speed to Infinity will make its movement synchronous,\r\nwhich makes the synchronous distance, direction, and hit-testing useful\r\nfor realtime game-making.\r\n\r\nPen and Fill Styles\r\n-------------------\r\n\r\nThe turtle pen respects canvas styling: any valid strokeStyle is\r\naccepted; and also using a space-separated syntax, lineWidth, lineCap,\r\nlineJoin, miterLimit, and fillStyle can be specified, e.g.,\r\npen('red lineWidth 5 lineCap square').  The same syntax applies for\r\nstyling dot and fill (except that the default interpretation for the\r\nfirst value is fillStyle instead of strokeStyle).\r\n\r\nThe fill method is used by tracing an invisible path using the\r\npen('path') style, and then calling the fill method.  Disconnected\r\npaths can be created using pu() and pd().\r\n\r\nConventions for Musical Notes\r\n-----------------------------\r\n\r\nThe play method plays a sequence of notes specified using a subset of\r\nstandard ABC notation.  Capital C denotes middle C, and lowercase c is\r\nan octave higher.  Pitches and durations can be altered with commas,\r\napostrophes, carets, underscores, digits, and slashes as in the\r\nstandard.  Enclosing letters in square brackets represents a chord,\r\nand z represents a rest.  The default tempo is 120, but can be changed\r\nby passing a options object as the first parameter setting tempo, e.g.,\r\n{ tempo: 200 }.  Other options include volume: 0.5, type: 'sine' or\r\n'square' or 'sawtooth' or 'triangle', and envelope: which defines\r\nan ADSR envelope e.g., { a: 0.01, d: 0.2, s: 0.1, r: 0.1 }.\r\n\r\nThe turtle's motion will pause while it is playing notes.  To play\r\nnotes without stalling turtle movement, use the global function sound()\r\ninstead of the turtle method play().\r\n\r\nDirecting Logic in the Animation Queue\r\n--------------------------------------\r\n\r\nThe direct method can be used to queue logic (including synchronous\r\ntests or actions) by running a function in the animation queue.  Unlike\r\njquery queue(), direct arranges things so that if further animations\r\nare queued by the callback function, they are inserted (in natural\r\nrecursive functional execution order) instead of being appended.\r\n\r\nTurnto and Absolute Bearings\r\n----------------------------\r\n\r\nThe turnto method can turn to an absolute bearing (if called with a\r\nsingle numeric argument) or towards an absolute position on the\r\nscreen.  The methods moveto and turnto accept either page or\r\ngraphing coordinates.\r\n\r\nMoveto and Two Flavors of Cartesian Coordinates\r\n-----------------------------------------------\r\n\r\nGraphing coordinates are measured upwards and rightwards from the\r\ncenter of the page, and they are specified as bare numeric x, y\r\narguments or [x, y] pairs as returned from getxy().\r\n\r\nPage coordinates are specified by an object with pageX and pageY\r\nproperties, or with a pagexy() method that will return such an object.\r\nThat includes, usefullly, mouse events and turtle objects.  Page\r\ncoordinates are measured downward from the top-left corner of the\r\npage to the center (or transform-origin) of the given object.\r\n\r\nHit Testing\r\n-----------\r\n\r\nThe hit-testing functions touches() and enclosedby() will test for\r\ncollisions using the convex hulls of the objects in question.\r\nThe hull of an element defaults to the bounding box of the element\r\n(as transformed) but can be overridden by the turtleHull CSS property,\r\nif present.  The default turtle is given a turtle-shaped hull.\r\n\r\nTurtle Teaching Environment\r\n---------------------------\r\n\r\nA default turtle together with an interactive console are created by\r\ncalling eval($.turtle()).  That call exposes all the turtle methods\r\nsuch as (fd, rt, getxy, etc) as global functions operating on the default\r\nturtle.  It will also set up a number of other global symbols to provide\r\nbeginners with a simplified programming environment.\r\n\r\nIn detail, after eval($.turtle()):\r\n  * An &lt;img id=\"turtle\"&gt; is created if #turtle doesn't already exist.\r\n  * An eval debugging panel (see.js) is shown at the bottom of the screen.\r\n  * Turtle methods on the default turtle are packaged as globals, e.g., fd(10).\r\n  * Every #id element is turned into a global variable: window.id = $('#id').\r\n  * Default turtle animation is set to 1 move per sec so steps can be seen.\r\n  * Global event listeners are created to update global event variables.\r\n  * Methods of $.turtle.* (enumerated below) are exposed as global functions.\r\n  * String constants are defined for the 140 named CSS colors.\r\n\r\nBeyond the functions to control the default turtle, the globals added by\r\n$.turtle() are as follows:\r\n\r\n<pre>\r\nlastclick             // Event object of the last click event in the doc.\r\nlastmousemove         // The last mousemove event.\r\nlastmouseup           // The last mouseup event.\r\nlastmousedown         // The last mousedown event.\r\nkeydown               // The last keydown event.\r\nkeyup                 // The last keyup event.\r\nkeypress              // The last keypress event.\r\nhatch([n,] [img])     // Creates and returns n turtles with the given img.\r\ncs()                  // Clears the screen, both the canvas and the body text.\r\ncg()                  // Clears the graphics canvas without clearing the text.\r\nct()                  // Clears the text without clearing the canvas.\r\ndefaultspeed(mps)     // Sets $.fx.speeds.turtle to 1000 / mps.\r\ntick([perSec,] fn)    // Sets fn as the tick callback (null to clear).\r\nrandom(n)             // Returns a random number [0..n-1].\r\nrandom(list)          // Returns a random element of the list.\r\nrandom('normal')      // Returns a gaussian random (mean 0 stdev 1).\r\nrandom('uniform')     // Returns a uniform random [0...1).\r\nrandom('position')    // Returns a random {pageX:x, pageY:y} coordinate.\r\nrandom('color')       // Returns a random hsl(*, 100%, 50%) color.\r\nrandom('gray')        // Returns a random hsl(0, 0, *) gray.\r\nremove()              // Removes default turtle and its globals (fd, etc).\r\nsee(a, b, c...)       // Logs tree-expandable data into debugging panel.\r\nwrite(html)           // Appends html into the document body.\r\nread([label,] fn)     // Makes a one-time input field, calls fn after entry.\r\nreadnum([label,] fn)  // Like read, but restricted to numeric input.\r\nreadstr([label,] fn)  // Like read, but never converts input to a number.\r\nbutton([label,] fn)   // Makes a clickable button, calls fn when clicked.\r\ntable(m, n)           // Outputs a table with m rows and n columns.\r\nsound('[DFG][EGc]')   // Plays musical notes now, without queueing.\r\n</pre>\r\n\r\nHere is another CoffeeScript example that demonstrates some of\r\nthe functions:\r\n\r\n<pre>\r\neval $.turtle()  # Create the default turtle and global functions.\r\n\r\ndefaultspeed Infinity\r\nwrite \"Catch blue before red gets you.\"\r\nbk 100\r\nr = hatch red\r\nb = hatch blue\r\ntick 10, ->\r\n  turnto lastmousemove\r\n  fd 6\r\n  r.turnto turtle\r\n  r.fd 4\r\n  b.turnto bearing b\r\n  b.fd 3\r\n  if b.touches(turtle)\r\n    write \"You win!\"\r\n    tick off\r\n  else if r.touches(turtle)\r\n    write \"Red got you!\"\r\n    tick off\r\n  else if not b.enclosedby(document)\r\n    write \"Blue got away!\"\r\n    tick off\r\n</pre>\r\n\r\nThe turtle teaching environment is designed to work well with either\r\nJavascript or CoffeeScript.\r\n\r\nJQuery CSS Hooks for Turtle Geometry\r\n------------------------------------\r\n\r\nUnderlying turtle motion are turtle-oriented 2d transform jQuery cssHooks,\r\nwith animation support on all motion:\r\n\r\n<pre>\r\n$(q).css('turtleSpeed', '10');         // default speed in moves per second.\r\n$(q).css('turtlePosition', '30 40');   // position in local coordinates.\r\n$(q).css('turtlePositionX', '30px');   // x component.\r\n$(q).css('turtlePositionY', '40px');   // y component.\r\n$(q).css('turtleRotation', '90deg');   // rotation in degrees.\r\n$(q).css('turtleScale', '2');          // double the size of any element.\r\n$(q).css('turtleScaleX', '2');         // x stretch after twist.\r\n$(q).css('turtleScaleY', '2');         // y stretch after twist.\r\n$(q).css('turtleTwist', '45deg');      // turn before stretching.\r\n$(q).css('turtleForward', '50px');     // position in direction of rotation.\r\n$(q).css('turtleTurningRadius, '50px');// arc turning radius for rotation.\r\n$(q).css('turtlePenStyle', 'red');     // or 'red lineWidth 2px' etc.\r\n$(q).css('turtlePenDown', 'up');       // default 'down' to draw with pen.\r\n$(q).css('turtleHull', '5 0 0 5 0 -5');// fine-tune shape for collisions.\r\n</pre>\r\n\r\nArbitrary 2d transforms are supported, including transforms of elements\r\nnested within other elements that have css transforms. For example, arc\r\npaths of a turtle within a skewed div will transform to the proper elliptical\r\narc.  Note that while turtle motion is transformed, lines and dots are not:\r\nfor example, dots are always circular.  To get transformed circles, trace\r\nout an arc.\r\n\r\nTransforms on the turtle itself are used to infer the turtle position,\r\ndirection, and rendering of the sprite.  ScaleY stretches the turtle\r\nsprite in the direction of movement also stretches distances for\r\nmotion in all directions.  ScaleX stretches the turtle sprite perpendicular\r\nto the direction of motion and also stretches line and dot widths for\r\ndrawing.\r\n\r\nA canvas is supported for drawing, but only created when the pen is\r\nused; pen styles include canvas style properties such as lineWidth\r\nand lineCap.\r\n\r\nA convex hull polygon can be set to be used by the collision detection\r\nand hit-testing functions (enclosedby, touches).  The turtleHull is a list\r\nof (unrotated) x-y coordinates relative to the object's transformOrigin.\r\nIf set to 'auto' (the default) the hull is just the bounding box for the\r\nelement.\r\n\r\nLicense (MIT)\r\n-------------\r\n\r\nCopyright (c) 2013 David Bau\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}