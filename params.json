{"name":"Jquery-turtle","tagline":"Turtle Graphics for JQuery","body":"jQuery-turtle\r\n=============\r\n\r\nversion 2.0.2\r\n\r\njQuery-turtle is a jQuery plugin for turtle graphics.\r\n\r\nWith jQuery-turtle, every DOM element is a turtle that can be\r\nmoved using LOGO-inspired turtle methods like fd, bk, rt, and lt.\r\n<pre>\r\n  $('#turtle').pen('red').rt(90).fd(100).lt(90).bk(50).fadeOut();\r\n</pre>\r\nThe plugin also provides functions to help in a rotated,\r\nscaled, and transformed world where nested elements may be\r\ntransformed.  There are functions for collision testing, absolute\r\npositioning, and absolute direction reading and setting.\r\n\r\n[Try an interactive demo (CoffeeScript syntax) here.](\r\nhttp://davidbau.github.io/jqt/jquery-turtle-demo.html)\r\n<iframe src=\"http://davidbau.github.io/jqt/jquery-turtle-demo.html\" height=\"560\" width=\"640\" style=\"background:lightblue\">\r\ninteractive demo\r\n</iframe>\r\n\r\nThe plugin sets up low-level CSS hooks for synthetic CSS\r\nproperties that can be animated or used to directly manipulate\r\nturtle geometry at a basic mathematical level.  Under the covers,\r\nCSS3 2D transforms and jQuery animations are used to execute\r\nand store turtle movement.  So jQuery-turtle interacts well with\r\nother jQuery animations or direct uses of 2D CSS3 transforms.\r\n\r\nA high-level educational environment is enabled by $.turtle().\r\nThat call creates a set of global objects and functions\r\ncatering to beginners.  These include a default turtle\r\nand global functions to control it; an onpage debugger panel;\r\njQuery instances for every object with an #id; simplified\r\nglobals to access recent mouse and keyboard events, and\r\nsimplified functions for randomness, timers, animation control,\r\nand creation of new turtles.  The jQuery teaching environment\r\nhas been developed to support a curriculum for young students.\r\n\r\nJQuery Methods for Turtle Movement\r\n----------------------------------\r\n\r\nTurtle-oriented methods taking advantage of the css support:\r\n<pre>\r\n  $(x).fd(100)      // Forward relative motion in local coordinates.\r\n  $(x).bk(50)       // Back.\r\n  $(x).rt(90)       // Right turn.\r\n  $(x).lt(45)       // Left turn.\r\n  $(x).pen('red')   // Sets a pen style, or 'none' for no drawing.\r\n  $(x).dot(12)      // Draws a dot of diameter 12.\r\n  $(x).erase()      // Erases under the turtles collision hull.\r\n  $(x).bg('pink')   // Shorthand for css(\"background\", \"pink\")\r\n  $(x).moveto({pageX: 40, pageY: 140})  // Absolute motion in page coordinates.\r\n  $(x).turnto(heading || position)      // Absolute heading adjustment.\r\n  $(x).scale(1.5)   // Scales the element up to 150% size.\r\n  $(x).twist(180)   // Changes which direction is considered \"forward\".\r\n  $(x).mirror(true) // Flips the turtle across its direction axis.\r\n  $(x).reload()     // Reloads the turtle's image (restarting animated gifs)\r\n  // Methods below this line do not queue for animation.\r\n  $(x).center()     // Page coordinate position of transform-origin.\r\n  $(x).direction()  // Absolute heading taking into account nested transforms.\r\n  $(x).shown()      // Shorthand for is(\":visible\")\r\n  $(x).hidden()     // Shorthand for !is(\":visible\")\r\n  $(x).touches(y)   // Collision tests elements (uses turtleHull if present).\r\n  $(x).encloses(y)  // Containment collision test.\r\n  $(x).apart(fn)    // Like each, but this is set to $(elt) instead of elt.\r\n  $(x).within(d, t) // Filters to items with centers within d of t.center().\r\n  $(x).notwithin()  // The negation of within.\r\n</pre>\r\n\r\nWhen $.fx.speeds.turtle is nonzero (the default is zero unless\r\n$.turtle() is called), the first four movement functions animate\r\nat that speed, and the remaining mutators also participate in the\r\nanimation queue.  Note that property-reading functions such as\r\ntouches() are synchronous and will not queue, and setting\r\n$.fx.speed.turtle to 0 will make movement functions synchronous.\r\n\r\nThe absolute motion methods moveto and turnto accept any argument\r\nwith pageX and pageY, including, usefully, mouse events.  They\r\noperate in absolute page coordinates even when the turtle is nested\r\nwithin further transformed elements.\r\n\r\nThe hit-testing functions touches() and encloses() will test using\r\nthe convex hull for the two objects in question. This defaults to\r\nthe bounding box of the elements (as transformed) but can be overridden\r\nby the turtleHull CSS property, if present.\r\n\r\nJQuery CSS Hooks for Turtle Geometry\r\n------------------------------------\r\n\r\nLow-level Turtle-oriented 2d transform cssHooks, with animation\r\nsupport on all motion:\r\n<pre>\r\n  $(x).css('turtlePosition', '30 40');   // position in local coordinates.\r\n  $(x).css('turtlePositionX', '30');     // x component.\r\n  $(x).css('turtlePositionY', '40');     // y component.\r\n  $(x).css('turtleRotation', '90');      // rotation in degrees.\r\n  $(x).css('turtleScale', '2');          // double the size of any element.\r\n  $(x).css('turtleScaleX', '2');         // x stretch before rotate after twist.\r\n  $(x).css('turtleScaleY', '2');         // y stretch before rotate after twist.\r\n  $(x).css('turtleTwist', '45');         // turn before stretching.\r\n  $(x).css('turtleDisplacement', '50');  // position in direction of rotation.\r\n  $(x).css('turtlePen', 'red');          // or 'red lineWidth 2px' etc.\r\n  $(x).css('turtleHull', '5 0 0 5 0 -5');// fine-tune shape for collisions.\r\n</pre>\r\n\r\nArbitrary 2d transforms are supported, including transforms of elements\r\nnested within other elements that have css transforms. Transforms are\r\nautomatically decomposed to turtle components when necessary.\r\n\r\nA canvas is supported for drawing, but only created when the pen is\r\nused; pen styles include canvas style properties such as lineWidth\r\nand lineCap.\r\n\r\nA convex hull polygon can be set to be used by the collision detection\r\nand hit-testing functions (encloses, touches).  The turtleHull is a list\r\nof x-y coordinates relative to the object's transformOrigin.  If set to\r\n'auto' (the default) the hull is just the bounding box for the element.\r\n\r\nTurtle Teaching Environment\r\n---------------------------\r\n\r\nAn optional teaching environment setup is created by $.turtle().\r\nIt provides easy packaging for the above functionality.\r\n\r\nAfter $.turtle():\r\n  * An &lt;img id=\"turtle\"&gt; is created if #turtle doesn't already exist.\r\n  * An eval debugging panel (see.js) is shown at the bottom of the screen.\r\n  * Turtle methods on the default turtle are packaged as globals, e.g., fd(10).\r\n  * Every #id element is turned into a global variable: window.id = $('#id').\r\n  * Globals are set up to save events: \"lastclick\", \"lastmousemove\", etc.\r\n  * Default turtle animation is set to 1 move per sec so steps can be seen.\r\n  * speed(movesPerSec) adjusts $.fx.speeds.turtle to 1000 / movesPerSec.\r\n  * tick([ticksPerSec,] fn) is similarly an easier-to-call setInterval.\r\n  * random(lessThanThisInteger || array) is an easy alternative to Math.random.\r\n  * remove() will remove the global turtle and global turtle methods.\r\n  * hatch([n,] [spec]) creates and returns any number of new turtles.\r\n  * see(a, b, c) logs tree-expandable data into the debugging panel.\r\n  * output(html) appends html to the document body.\r\n  * input(label, callback) appends a labelled input field to the document body.\r\n\r\nFor example, after $.turtle(), the following is a valid program\r\nin CoffeeScript syntax:\r\n\r\n<pre>\r\nspeed 100\r\npen 'red'\r\nchaser = hatch()\r\nchaser.moveto 0,0\r\nchaser.bg 'red'\r\nplayer = turtle\r\ntick 10, ->\r\n  player.turnto lastmousemove\r\n  player.fd 5\r\n  chaser.turnto player\r\n  chaser.rt (random 60) - 30\r\n  chaser.fd 5\r\n  if chaser.touches player\r\n    see \"tag! you're it!\"\r\n    tick ->\r\n</pre>\r\n\r\nThe turtle teaching environment is designed to work well with either\r\nJavascript or CoffeeScript.\r\n\r\nLicense (MIT)\r\n-------------\r\n\r\nCopyright (c) 2013 David Bau\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}